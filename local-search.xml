<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>音乐推荐</title>
    <link href="/2022/09/01/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/%E9%9F%B3%E4%B9%90%E6%8E%A8%E8%8D%90/"/>
    <url>/2022/09/01/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/%E9%9F%B3%E4%B9%90%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="音乐推荐"><a href="#音乐推荐" class="headerlink" title="音乐推荐"></a>音乐推荐</h1><h2 id="英文歌的话我很推荐"><a href="#英文歌的话我很推荐" class="headerlink" title="英文歌的话我很推荐"></a>英文歌的话我很推荐</h2><p>《what are words》《In the End》《All Time Low》《Let Me Down Slowly (Acoustic)》《Love Story 》《BLUE》《As Long As You Love Me》《Wonderful U 》《Psycho (Pt. 2)》《We Don’t Talk Anymore》《Meant To Be》《Try》《Dancing With Your Ghost》《Champagne》《NUMB》《Winter Without You》《You Are Beautiful》《Can We Kiss Forever》《Fantasy》《By Your Side》《Fractures》《Creep》《All Falls Down》《Coming Home》《Counting Stars》《Waiting For Love》《Sunset&#x2F;Sunrise (Prod. Kendo)》《Once Upon A Time》《Waiting For》《beautiful now》《♡hush》《Señorita》</p><h2 id="纯音乐"><a href="#纯音乐" class="headerlink" title="纯音乐"></a>纯音乐</h2><p>《You》《夏恋》《夜、萤火虫和你》《所念皆星河》《A Little Story》《Asphyxia》《Lonely Day》《My Sunset (Original Mix)》《Eye Water》《いのちの名前》《ᐇ》《MELANCHOLY》《烟袋斜街》《rainy road》《Paris》《鸟之诗 (八音盒版)》《Luv Letter 》《Flower Dance》《Experience》《Do What You Are Doing》《Illusionary Daytime》《梦》《Without You I Am Dying》《Weltz》《Clear Water》《Rue des Trois Frères》《Damascus》《被困住的鲸》《May I see U again-I love you 3000 times（翻自 MT1990） 》《向日葵》《Last Reunion (Epicmusicvn Series)》《Beauty (Nujabes Tribute)》《Time Back》《桜流し》《i dont care about anything anymore》《山霞》《Ｌｏｎｅｌｙ Ｓｏｕｌ》《烟花落》《wifey》《夢桜》</p><h2 id="日语歌"><a href="#日语歌" class="headerlink" title="日语歌"></a>日语歌</h2><p>《sakura》《Yellow》《彼女は旅に出る》《summertime》《女生徒》《透明で透き通って何にでもなれそうで》《us feat. ゆきな》《Mind Brand》《ピースサイン》《オノマトペメガネ》《打上花火》《Lemon》《STYX HELIX》《ピースサイン》《いつも何度でも》《secret base <del>君がくれたもの</del> (10 years after Ver.)》《終わりの世界から》《アイロニ》《帝国少女》《なんでもないや 》《夢燈籠 》《Katharsis》《つきとさなぎ》《カワキヲアメク》《main actor》《僕が死のうと思ったのは》</p>]]></content>
    
    
    <categories>
      
      <category>生活小记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue组件传值的12种方式</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E7%9A%8412%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E7%9A%8412%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="vue组件传值的12种方式"><a href="#vue组件传值的12种方式" class="headerlink" title="vue组件传值的12种方式"></a>vue组件传值的12种方式</h1><p><a href="https://imgse.com/i/v5hlyd"><img src="https://s1.ax1x.com/2022/09/01/v5hlyd.png" alt="v5hlyd.png"></a></p><p>Vue最常见的12种组件间的通讯方式</p><ul><li>props</li><li>$emit</li><li>.sync</li><li>v-model</li><li>ref</li><li>$children &#x2F; $parent</li><li>$attrs &#x2F; $listeners</li><li>provide &#x2F; inject</li><li>EventBus</li><li>Vuex</li><li>$root</li><li>slot</li></ul><p>适合父子间通信：props、$emit、$ref、slot、$parent、$children</p><p>适合兄弟组件之间的通信：eventBus、Vuex</p><p>祖孙与后代组件之间的通信：$attrs&#x2F;$listeners、provide&#x2F;inject、eventBus、Vuex</p><p>复杂关系的组件之间的通信：Vuex</p><h2 id="1、props"><a href="#1、props" class="headerlink" title="1、props"></a>1、props</h2><p>适用场景：父组件向子组件传递数据</p><p>父组件向子组件传送数据，这应该是最常用的方式了</p><p>子组件接收到数据之后，不能直接修改父组件的数据。</p><p>否则会报错，因为当父组件重新渲染时，数据会被覆盖。如果只在子组件内要修改的话推荐使用computed</p><p><a href="https://imgse.com/i/v5hyT0"><img src="https://s1.ax1x.com/2022/09/01/v5hyT0.png" alt="v5hyT0.png"></a></p><h2 id="2、-sync-子组件可以修改父组件内容"><a href="#2、-sync-子组件可以修改父组件内容" class="headerlink" title="2、.sync 子组件可以修改父组件内容"></a>2、.sync 子组件可以修改父组件内容</h2><p>.sync可以帮我们实现父组件向子组件传递的数据的双向绑定，所以子组件接收到数据后可以直接修改，并且会同时修改父组件的数据</p><p>适用场景：子组件传递数据给父组件</p><p><a href="https://imgse.com/i/v54CAP"><img src="https://s1.ax1x.com/2022/09/01/v54CAP.png" alt="v54CAP.png"></a></p><h2 id="3、v-model"><a href="#3、v-model" class="headerlink" title="3、v-model"></a>3、v-model</h2><p>和.sync类似，可以实现将父组件传给子组件的数据为双向绑定，子组件通过$emit修改父组件的数据</p><p><a href="https://imgse.com/i/v54ih8"><img src="https://s1.ax1x.com/2022/09/01/v54ih8.png" alt="v54ih8.png"></a></p><h2 id="4、ref"><a href="#4、ref" class="headerlink" title="4、ref"></a>4、ref</h2><p>ref如果在普通的DOM元素上，引用指向的就是该DOM元素;</p><p>如果在子组件上，引用的指向就是子组件实例;</p><p>父组件可以通过 ref 主动获取子组件的属性或者调用子组件的方法</p><p><a href="https://imgse.com/i/v54k9S"><img src="https://s1.ax1x.com/2022/09/01/v54k9S.png" alt="v54k9S.png"></a></p><h2 id="5、-emit-x2F-v-on"><a href="#5、-emit-x2F-v-on" class="headerlink" title="5、$emit &#x2F; v-on"></a>5、$emit &#x2F; v-on</h2><p>子组件通过派发事件的方式给父组件数据，或者触发父组件更新等操作</p><p><a href="https://imgse.com/i/v546ud"><img src="https://s1.ax1x.com/2022/09/01/v546ud.png" alt="v546ud.png"></a></p><h2 id="6-、-attrs-x2F-listeners"><a href="#6-、-attrs-x2F-listeners" class="headerlink" title="6 、$attrs &#x2F; $listeners"></a>6 、$attrs &#x2F; $listeners</h2><p>多层嵌套组件传递数据时，如果只是传递数据，而不做中间处理的话就可以用这个，比如父组件向孙子组件传递数据时</p><p>$attrs：包含父作用域里除 class 和 style 除外的非 props 属性集合。通过this.$attrs获取父作用域中所有符合条件的属性集合，然后还要继续传给子组件内部的其他组件，就可以通过v-bind&#x3D;”$attrs”</p><p>$listeners：包含父作用域里.native除外的监听事件集合。如果还要继续传给子组件内部的其他组件，就可以通过v-on&#x3D;”$linteners”使用方式是相同的</p><p><a href="https://imgse.com/i/v54REt"><img src="https://s1.ax1x.com/2022/09/01/v54REt.png" alt="v54REt.png"></a></p><h2 id="7、-children-x2F-parent"><a href="#7、-children-x2F-parent" class="headerlink" title="7、$children &#x2F; $parent"></a>7、$children &#x2F; $parent</h2><p>$children：获取到一个包含所有子组件(不包含孙子组件)的VueComponent对象数组，可以直接拿到子组件中所有数据和方法等</p><p>$parent：获取到一个父节点的VueComponent对象，同样包含父节点中所有数据和方法等</p><p><a href="https://imgse.com/i/v5458S"><img src="https://s1.ax1x.com/2022/09/01/v5458S.png" alt="v5458S.png"></a></p><h2 id="8、provide-x2F-inject"><a href="#8、provide-x2F-inject" class="headerlink" title="8、provide &#x2F; inject"></a>8、provide &#x2F; inject</h2><p>适用场景：祖先传递值给子孙</p><p>使用方式与vue2.0略有差异，vue2.0的provide和inject都为配置项，而在 3.x ， provide 需要导入并在 setup 里启用，并且现在是一个全新的方法。在 3.x ， provide 需要导入并在 setup 里启用，并且现在是一个全新的方法。</p><p>provide &#x2F; inject是依赖注入，在一些插件或组件库里被常用</p><p>provide：可以让我们指定想要提供给后代组件的数据或方法</p><p>inject：在任何后代组件中接收想要添加在这个组件上的数据或方法，不管组件嵌套多深都可以直接拿来用</p><p>要注意的是provide和inject传递的数据不是响应式的，也就是说用inject接收来数据后，provide里的数据改变了，后代组件中的数据不会改变，除非传入的就是一个可监听的对象 所以建议还是传递一些常量或者方法</p><p><a href="https://imgse.com/i/v54X5V"><img src="https://s1.ax1x.com/2022/09/01/v54X5V.png" alt="v54X5V.png"></a></p><h2 id="9、-EventBus"><a href="#9、-EventBus" class="headerlink" title="9、 EventBus"></a>9、 EventBus</h2><p>适用场景：兄弟组件&#x2F;隔代组件之间的通信</p><p>EventBus是中央事件总线，不管是父子组件，兄弟组件，跨层级组件等都可以使用它完成通信操作</p><p>定义方式有三种</p><p><a href="https://imgse.com/i/v55Z8O"><img src="https://s1.ax1x.com/2022/09/01/v55Z8O.png" alt="v55Z8O.png"></a></p><p>使用如下，以方法一按需引入为例</p><p><a href="https://imgse.com/i/v55mxe"><img src="https://s1.ax1x.com/2022/09/01/v55mxe.png" alt="v55mxe.png"></a></p><h2 id="10、Vuex-在大项目中被常用"><a href="#10、Vuex-在大项目中被常用" class="headerlink" title="10、Vuex 在大项目中被常用"></a>10、Vuex 在大项目中被常用</h2><p>适用场景: 复杂关系的组件数据传递</p><p>Vuex作用相当于一个用来存储共享变量的容器</p><p>state：包含了store中存储的各个状态。</p><p>getter: 类似于 Vue 中的计算属性，根据其他 getter 或 state 计算返回值。</p><p>mutation: 一组方法，是改变store中状态的执行者，只能是同步操作。</p><p>action: 一组方法，其中可以包含异步操作。</p><p><a href="https://imgse.com/i/v55MqA"><img src="https://s1.ax1x.com/2022/09/01/v55MqA.png" alt="v55MqA.png"></a></p><h2 id="11、-root"><a href="#11、-root" class="headerlink" title="11、$root"></a>11、$root</h2><p>1、  作用：访问根组件中的属性或方法</p><p>2、  注意：是根组件，不是父组件。$root只对根组件有用</p><h2 id="12、slot插槽"><a href="#12、slot插槽" class="headerlink" title="12、slot插槽"></a>12、slot插槽</h2><p>就是把子组件的数据通过插槽的方式传给父组件使用，然后再插回来</p><p><a href="https://imgse.com/i/v55JG8"><img src="https://s1.ax1x.com/2022/09/01/v55JG8.png" alt="v55JG8.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序的登录流程</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序的登录流程"><a href="#微信小程序的登录流程" class="headerlink" title="微信小程序的登录流程"></a>微信小程序的登录流程</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>传统的web开发实现登陆功能，一般的做法是输入账号密码、或者输入手机号及短信验证码进行登录。</p><p>服务端校验用户信息通过之后，下发一个代表登录态的 token 给客户端，以便进行后续的交互,每当token过期，用户都需要重新登录。</p><p>而在微信小程序中，可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系，从而实现登陆功能。</p><p>实现小程序用户体系主要涉及到openid和code的概念：</p><p>1.调用wx.login()方法会生成code，将code作为参数传递给微信服务器指定接口，就可以获取用户的openid。</p><p>2.对于每个小程序，微信都会将用户的微信ID映射出一个小程序 openid，作为这个用户在这个小程序的唯一标识。</p><h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>微信小程序登陆具体实现的逻辑如下图所示：</p><p><a href="https://imgse.com/i/v5fqMj"><img src="https://s1.ax1x.com/2022/09/01/v5fqMj.png" alt="v5fqMj.png"></a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>通过  wx.<span class="hljs-keyword">login</span>()  获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo 读取用户数据。<br><span class="hljs-number">2.</span>由于小程序后台授权域名无法授权微信的域名，所以需要自身后端调用微信服务器获取用户信息。<br><span class="hljs-number">3.</span>通过 wx.request() 方法请求业务方服务器，后端把 appid , appsecret  和 code 一起发送到微信服务器。appid 和 appsecret 都是微信提供的，可以在管理员后台找到。<br><span class="hljs-number">4.</span>微信服务器返回了 openid 及本次登录的会话密钥 session_key。<br><span class="hljs-number">5.</span>后端从数据库中查找 openid ，如果没有查到记录，说明该用户没有注册，如果有记录，则继续往下走。<br><span class="hljs-number">6.</span>session_key 是对用户数据进行加密签名的密钥。为了自身应用安全，session_key 不应该在网络上传输。<br><span class="hljs-number">7.</span>然后生成 <span class="hljs-keyword">session</span>并返回给小程序。<br><span class="hljs-number">8.</span>小程序把 <span class="hljs-keyword">session</span> 存到  <span class="hljs-keyword">storage</span> 里面。<br><span class="hljs-number">9.</span>下次请求时，先从 <span class="hljs-keyword">storage</span> 里面读取，然后带给服务端。<br><span class="hljs-number">10.</span>服务端对比 <span class="hljs-keyword">session</span> 对应的记录，然后校验有效期。<br></code></pre></td></tr></table></figure><p>更加详细的功能图如下所示：</p><p><a href="https://imgse.com/i/v5fjZq"><img src="https://s1.ax1x.com/2022/09/01/v5fjZq.png" alt="v5fjZq.png"></a></p><h2 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h2><p>实际业务中，我们还需要登录态是否过期，通常的做法是在登录态（临时令牌）中保存有效期数据，该有效期数据应该在服务端校验登录态时和约定的时间（如服务端本地的系统时间或时间服务器上的标准时间）做对比。</p><p>这种方法需要将本地存储的登录态发送到小程序的服务端，服务端判断为无效登录态时再返回需重新执行登录过程的消息给小程。</p><p>另一种方式可以通过调用wx.checkSession检查微信登陆态是否过期：</p><p>1.如果过期，则发起完整的登录流程</p><p>2.如果不过期，则继续使用本地保存的自定义登录态</p><p>这种方式的好处是不需要小程序服务端来参与校验，而是在小程序端调用AP，流程如下所示：</p><p><a href="https://imgse.com/i/v5hSiT"><img src="https://s1.ax1x.com/2022/09/01/v5hSiT.png" alt="v5hSiT.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex使用教程</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Vuex%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Vuex%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Vuex使用教程"><a href="#Vuex使用教程" class="headerlink" title="Vuex使用教程"></a>Vuex使用教程</h1><h2 id="一、Vuex简述"><a href="#一、Vuex简述" class="headerlink" title="一、Vuex简述"></a>一、Vuex简述</h2><p>Vuex其实就是一个状态管理工具，所谓的状态，就是数据，通过这个工具进行管理某些数据。当多个组件都需要同一个数据时，可以将这个数据交给Vuex进行统一的管理，组件可以直接引用这个数据，避免了组件间繁琐的层层传递的情况。</p><h2 id="二、Vuex核心"><a href="#二、Vuex核心" class="headerlink" title="二、Vuex核心"></a>二、Vuex核心</h2><p>Vuex有五大核心，state，getter，mutation，action，module。state用来存放要被管理的数据，getter相当于computed计算属性，mutation中用来定义要修改state中数据的方法，action中用来定义异步的一些方法，module可以将多个store分成一个一个的模块。</p><h2 id="三、Vuex使用"><a href="#三、Vuex使用" class="headerlink" title="三、Vuex使用"></a>三、Vuex使用</h2><p>1.在vue项目中使用Vuex时，需要先安装Vuex插件，并且注册，一般情况下都会在，在src下新创建一个store文件夹，下边有一个index.vue，在这个文件中创建store容器实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 安装插件</span><br>npm install vuex --save<br><span class="hljs-comment">// 2. 注册插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span> <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br></code></pre></td></tr></table></figure><p>2.创建vuex实例，在vuex上提供了一个Store()方法，用来创建实例，将其命名为store，意为仓库的意思。在Vuex.Store()中传一个配置对象，配置对象中包括上述的五大核心，如果用不到，也可以不做配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">num</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-comment">// 存放数据</span><br>    <span class="hljs-attr">getters</span>: &#123;&#125;, <span class="hljs-comment">// 计算属性</span><br>    <span class="hljs-attr">mutations</span>: &#123;&#125;, <span class="hljs-comment">// 修改state中数据的一些方法</span><br>    <span class="hljs-attr">actions</span>: &#123;&#125;, <span class="hljs-comment">// 异步方法</span><br>    <span class="hljs-attr">modules</span>: &#123;&#125; <span class="hljs-comment">// store模块</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>3.在入口文件main.js中引入store。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index.vue&#x27;</span> <span class="hljs-comment">// 简写 import store from &#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>   <span class="hljs-attr">store</span>: store, <span class="hljs-comment">// es6 简写  直接写 store 属性名和变量名相同</span><br>   <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>4.在页面中如何使用store中的数据？在使用vuex中的数据之前，先使用import导入写好的store。组件中在插值表达式中使用$store.state.num获取store中num的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;&#123;&#123; $store.state.num &#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="四、mapState，mapMutations，mapGetters，mapActions映射"><a href="#四、mapState，mapMutations，mapGetters，mapActions映射" class="headerlink" title="四、mapState，mapMutations，mapGetters，mapActions映射"></a>四、mapState，mapMutations，mapGetters，mapActions映射</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> <span class="hljs-comment">// 先从vuex中结解构出四个方法 </span><br><span class="hljs-keyword">import</span> &#123;mapState, mapMutations, mapGetters, mapActions&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-number">2.</span> <span class="hljs-comment">// 在computed计算属性中映射state数据和getters计算属性</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;模块名&#x27;</span>, [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>])<br>    ...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;模块名&#x27;</span>, [<span class="hljs-string">&#x27;getName&#x27;</span>])<br>&#125;<br><span class="hljs-number">3.</span> <span class="hljs-comment">// 在methods方法中映射mutations和actions方法</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;模块名&#x27;</span>, [<span class="hljs-string">&#x27;方法名1&#x27;</span>,<span class="hljs-string">&#x27;方法名2&#x27;</span>])<br>    ...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;模块名&#x27;</span>, [<span class="hljs-string">&#x27;方法名1&#x27;</span>,<span class="hljs-string">&#x27;方法名2&#x27;</span>])<br>&#125;<br><span class="hljs-number">4.</span> 这些数据和方法都可以通过<span class="hljs-variable language_">this</span>来调用和获取<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 实现网页背景水印功能</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Vue3-%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Vue3-%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3-实现网页背景水印功能"><a href="#Vue3-实现网页背景水印功能" class="headerlink" title="Vue3 实现网页背景水印功能"></a>Vue3 实现网页背景水印功能</h1><p>经常有一些公司和组织出于系统文件或信息安全保密的需要，需要在系统网页上增加带有个人标识（系统账号或个人信息）的水印，可以简单防止截图外传</p><p><a href="https://imgse.com/i/v5RcFO"><img src="https://s1.ax1x.com/2022/09/01/v5RcFO.png" alt="v5RcFO.png"></a></p><p>首先我们来看这样一个水印功能的实现思路，通常是在我们原有的网页上附上一个 DIV 层，将它设置绝对定位铺满整个窗口，然后 z-index 值尽量往大了设，保证让水印层处于当前网页所有元素的上面，又不影响当前网页的操作。</p><p>水印上的字体有两种方式添加：</p><ul><li><p>第一种直接将字体用块元素包裹，动态设置绝对定位，然后通过 transform 属性旋转；</p></li><li><p>第二种通过在 canvas 上绘制出字体，设置好样式，然后以图片的样式导出，最后用图片作为水印层的背景图。</p></li></ul><p>处于性能方面考虑，第二种方式最优。我们来看具体怎么实现？</p><p>作为一块独立的功能，我们在 Vue3 中常用 hooks 来实现，通过分析我们概括出实现水印需要的几个功能函数和对外接口：</p><p>对外接口</p><ul><li>清除水印（clear）</li><li>设置水印（setWatermark）</li></ul><p>核心功能函数</p><ul><li>绘制文字背景图（createBase64）</li><li>绘制水印层（createWatermark）</li><li>页面随窗口大小调整更新（updateWatermark）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useWatermark</span>(<span class="hljs-params"></span><br><span class="hljs-params">  appendEl: Ref&lt;HTMLElement | <span class="hljs-literal">null</span>&gt; = ref(<span class="hljs-variable language_">document</span>.body) <span class="hljs-keyword">as</span> Ref&lt;HTMLElement&gt;</span><br><span class="hljs-params"></span>) &#123;<br>   <span class="hljs-comment">// 绘制文字背景图</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createBase64</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  <span class="hljs-comment">// 绘制水印层</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">createWatermark</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-comment">// 页面随窗口调整更新水印</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateWatermark</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br>  <span class="hljs-comment">// 对外提供的设置水印方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setWatermark</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  <span class="hljs-comment">// 清除水印</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">clear</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-keyword">return</span> &#123; setWatermark, clear &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>有了代码框架，就只需要实现函数和接口的内部实现了，另外还要考虑传参，来实现代码复用的灵活度和接口参数的可配置。</p><p>我们从具体的功能函数开始：</p><h2 id="绘制文字背景图"><a href="#绘制文字背景图" class="headerlink" title="绘制文字背景图"></a>绘制文字背景图</h2><p>这里的参数 str 就是要添加的水印文字，attr 为文字样式的属性，我们定义了属性的类型为 attr，它包含文字的字体和大小以及颜色等值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createBase64</span>(<span class="hljs-params">str: string, attr?: attr</span>) &#123;<br>  <span class="hljs-keyword">const</span> can = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>  <span class="hljs-keyword">const</span> width = <span class="hljs-number">200</span>;<br>  <span class="hljs-keyword">const</span> height = <span class="hljs-number">140</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(can, &#123; width, height &#125;);<br><br>  <span class="hljs-keyword">const</span> cans = can.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>  <span class="hljs-keyword">if</span> (cans) &#123;<br>    cans.<span class="hljs-title function_">rotate</span>((-<span class="hljs-number">20</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) / <span class="hljs-number">120</span>);<br>    cans.<span class="hljs-property">font</span> = attr?.<span class="hljs-property">font</span> ?? <span class="hljs-string">&quot;12px Reggae One&quot;</span>;<br>    cans.<span class="hljs-property">fillStyle</span> = attr?.<span class="hljs-property">fillStyle</span> ?? <span class="hljs-string">&quot;rgba(0, 0, 0, 0.12)&quot;</span>;<br>    cans.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&quot;left&quot;</span>;<br>    cans.<span class="hljs-property">textBaseline</span> = <span class="hljs-string">&quot;middle&quot;</span>;<br>    cans.<span class="hljs-title function_">fillText</span>(str, width / <span class="hljs-number">20</span>, height);<br>  &#125;<br>  <span class="hljs-keyword">return</span> can.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">type attr = &#123;<br>  font?: string;<br>  fillStyle?: string;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="绘制水印层"><a href="#绘制水印层" class="headerlink" title="绘制水印层"></a>绘制水印层</h2><p>这个函数的主要逻辑是先判断如果已经绘制了水印层，直接调用更新水印方法，如果还没有，先动态创建一个 DIV 层，设置绝对定位，铺满当前整个浏览器窗口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> id = domSymbol.<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">const</span> watermarkEl = shallowRef&lt;<span class="hljs-title class_">HTMLElement</span>&gt;();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createWatermark</span> = (<span class="hljs-params">str: string, attr?: attr</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">unref</span>(watermarkEl)) &#123;<br>      <span class="hljs-title function_">updateWatermark</span>(&#123; str, attr &#125;);<br>      <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    watermarkEl.<span class="hljs-property">value</span> = div;<br>    div.<span class="hljs-property">id</span> = id;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">pointerEvents</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">&quot;0px&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;0px&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">zIndex</span> = <span class="hljs-string">&quot;100000&quot;</span>;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-title function_">unref</span>(appendEl);<br>    <span class="hljs-keyword">if</span> (!el) <span class="hljs-keyword">return</span> id;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">clientHeight</span>: height, <span class="hljs-attr">clientWidth</span>: width &#125; = el;<br>    <span class="hljs-title function_">updateWatermark</span>(&#123; str, width, height, attr &#125;);<br>    el.<span class="hljs-title function_">appendChild</span>(div);<br>    <span class="hljs-keyword">return</span> id;<br>  &#125;;<br></code></pre></td></tr></table></figure><h2 id="更新水印"><a href="#更新水印" class="headerlink" title="更新水印"></a>更新水印</h2><p>因为更新水印方法主要是根据当前窗口高度和宽度来的更新水印背景的设置，利用一张 Base64 格式的图片平铺即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateWatermark</span>(<span class="hljs-params"></span><br><span class="hljs-params">  options: &#123;</span><br><span class="hljs-params">    width?: number;</span><br><span class="hljs-params">    height?: number;</span><br><span class="hljs-params">    str?: string;</span><br><span class="hljs-params">    attr?: attr;</span><br><span class="hljs-params">  &#125; = &#123;&#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> el = <span class="hljs-title function_">unref</span>(watermarkEl);<br>  <span class="hljs-keyword">if</span> (!el) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (options.<span class="hljs-property">width</span> !== <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;options.width&#125;</span>px`</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ioptions.<span class="hljs-property">height</span> !== <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;options.height&#125;</span>px`</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (options.<span class="hljs-property">str</span> !== <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">`url(<span class="hljs-subst">$&#123;createBase64(</span></span><br><span class="hljs-subst"><span class="hljs-string">      options.str,</span></span><br><span class="hljs-subst"><span class="hljs-string">      options.attr</span></span><br><span class="hljs-subst"><span class="hljs-string">    )&#125;</span>) left top repeat`</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，我们实现了主要的三个功能函数，下面就是两个对外接口：</p><h2 id="设置水印"><a href="#设置水印" class="headerlink" title="设置水印"></a>设置水印</h2><p>这里的主要点是考虑设置页面resize监听，来及时更新水印的位置。还要考虑 Vue 的生命周期，当我们卸载页面的时候要进行清除水印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setWatermark</span>(<span class="hljs-params">str: string, attr?: attr</span>) &#123;<br>  <span class="hljs-title function_">createWatermark</span>(str, attr);<br>  <span class="hljs-title function_">addResizeListener</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>, func);<br>  <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>();<br>  <span class="hljs-keyword">if</span> (instance) &#123;<br>    <span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">clear</span>();<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> func = <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> el = <span class="hljs-title function_">unref</span>(appendEl);<br>  <span class="hljs-keyword">if</span> (!el) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">clientHeight</span>: height, <span class="hljs-attr">clientWidth</span>: width &#125; = el;<br>  <span class="hljs-title function_">updateWatermark</span>(&#123; height, width &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="清除水印"><a href="#清除水印" class="headerlink" title="清除水印"></a>清除水印</h2><p>清除水印的时候顺便移除窗口大小监听函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">clear</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> domId = <span class="hljs-title function_">unref</span>(watermarkEl);<br>    watermarkEl.<span class="hljs-property">value</span> = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-title function_">unref</span>(appendEl);<br>    <span class="hljs-keyword">if</span> (!el) <span class="hljs-keyword">return</span>;<br>    domId &amp;&amp; el.<span class="hljs-title function_">removeChild</span>(domId);<br>    <span class="hljs-title function_">removeResizeListener</span>(el, func);<br>  &#125;;<br></code></pre></td></tr></table></figure><h2 id="水印功能-hooks-的使用"><a href="#水印功能-hooks-的使用" class="headerlink" title="水印功能 hooks 的使用"></a>水印功能 hooks 的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useWatermark &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;/@/hooks/watermark&quot;</span>;<br><span class="hljs-keyword">const</span> &#123; setWatermark, clear &#125; = <span class="hljs-title function_">useWatermark</span>();<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setWatermark</span>(watermarkText.<span class="hljs-property">value</span>);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">clear</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>至此，Vue3 版的网页水印功能实现全部完成。这里水印的字体大小、颜色和排布参考了企业微信的背景水印，使得看起来不那么突兀。</p><p><a href="https://imgse.com/i/v5Wx8e"><img src="https://s1.ax1x.com/2022/09/01/v5Wx8e.png" alt="v5Wx8e.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的前端JavaScript方法封装</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AFJavaScript%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AFJavaScript%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的前端JavaScript方法封装"><a href="#常用的前端JavaScript方法封装" class="headerlink" title="常用的前端JavaScript方法封装"></a>常用的前端JavaScript方法封装</h1><p>1、输入一个值，返回其数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">type</span>(<span class="hljs-params">para</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(para)<br>&#125;<br></code></pre></td></tr></table></figure><p>2、数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique1</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique2</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!obj[ele]) &#123;<br>            obj[ele] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique3</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = [];<br>    arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-title function_">indexOf</span>(ele) == -<span class="hljs-number">1</span>) &#123;<br>            result.<span class="hljs-title function_">push</span>(ele)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.返回当前的时间（年月日时分秒）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDateTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>        year = date.<span class="hljs-title function_">getFullYear</span>(),<br>        month = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>,<br>        day = date.<span class="hljs-title function_">getDate</span>(),<br>        hour = date.<span class="hljs-title function_">getHours</span>() + <span class="hljs-number">1</span>,<br>        minute = date.<span class="hljs-title function_">getMinutes</span>(),<br>        second = date.<span class="hljs-title function_">getSeconds</span>();<br>        month = <span class="hljs-title function_">checkTime</span>(month);<br>        day = <span class="hljs-title function_">checkTime</span>(day);<br>        hour = <span class="hljs-title function_">checkTime</span>(hour);<br>        minute = <span class="hljs-title function_">checkTime</span>(minute);<br>        second = <span class="hljs-title function_">checkTime</span>(second);<br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTime</span>(<span class="hljs-params">i</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">10</span>) &#123;<br>                i = <span class="hljs-string">&quot;0&quot;</span> + i;<br>       &#125;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> + year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span> + hour + <span class="hljs-string">&quot;时&quot;</span> + minute + <span class="hljs-string">&quot;分&quot;</span> + second + <span class="hljs-string">&quot;秒&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4.获得滚动条的滚动距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getScrollOffset</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">x</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span>,<br>            <span class="hljs-attr">y</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">x</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span>,<br>            <span class="hljs-attr">y</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.获取url中的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getWindonHref</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> sHref = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>;<br>    <span class="hljs-keyword">var</span> args = sHref.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;?&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (args[<span class="hljs-number">0</span>] === sHref) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> hrefarr = args[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;#&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>    <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; hrefarr.<span class="hljs-property">length</span>; i++) &#123;<br>        hrefarr[i] = hrefarr[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br>        obj[hrefarr[i][<span class="hljs-number">0</span>]] = hrefarr[i][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.防抖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">handle, delay</span>) &#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> _self = <span class="hljs-variable language_">this</span>,<br>            _args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            handle.<span class="hljs-title function_">apply</span>(_self, _args)<br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.节流</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">handler, wait</span>) &#123;<br>    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">var</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>        <span class="hljs-keyword">if</span> (nowTime - lastTime &gt; wait) &#123;<br>            handler.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            lastTime = nowTime;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个盒子，左边固定宽，右边自适应，你能想到几种方法</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%B8%A4%E4%B8%AA%E7%9B%92%E5%AD%90%EF%BC%8C%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%AE%BD%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%8C%E4%BD%A0%E8%83%BD%E6%83%B3%E5%88%B0%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%B8%A4%E4%B8%AA%E7%9B%92%E5%AD%90%EF%BC%8C%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%AE%BD%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%8C%E4%BD%A0%E8%83%BD%E6%83%B3%E5%88%B0%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="两个盒子，左边固定宽，右边自适应，你能想到几种方法"><a href="#两个盒子，左边固定宽，右边自适应，你能想到几种方法" class="headerlink" title="两个盒子，左边固定宽，右边自适应，你能想到几种方法"></a>两个盒子，左边固定宽，右边自适应，你能想到几种方法</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="公共的盒子部分"><a href="#公共的盒子部分" class="headerlink" title="公共的盒子部分"></a>公共的盒子部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="方法一：float和BFC实现"><a href="#方法一：float和BFC实现" class="headerlink" title="方法一：float和BFC实现"></a>方法一：float和BFC实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-class">.content</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background</span>: pink;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="方法二：absolute定位和margin值实现"><a href="#方法二：absolute定位和margin值实现" class="headerlink" title="方法二：absolute定位和margin值实现"></a>方法二：absolute定位和margin值实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br> <span class="hljs-selector-class">.content</span> &#123;<br>     <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>     <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.left</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: red;<br>        <span class="hljs-attribute">position</span>: absolute;<br>    &#125;<br>    <span class="hljs-selector-class">.right</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: pink;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">200px</span>;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="方法三：calc-100-固定内容的宽度-用calc函数动态计算数值"><a href="#方法三：calc-100-固定内容的宽度-用calc函数动态计算数值" class="headerlink" title="方法三：calc(100% - 固定内容的宽度) 用calc函数动态计算数值"></a>方法三：calc(100% - 固定内容的宽度) 用calc函数动态计算数值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br> <span class="hljs-selector-class">.content</span> &#123;<br>     <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>     <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.left</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: red;<br>        <span class="hljs-attribute">float</span>: left;<br>    &#125;<br>    <span class="hljs-selector-class">.right</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: pink;<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">200px</span>);<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="方法四：flex布局轻松搞定"><a href="#方法四：flex布局轻松搞定" class="headerlink" title="方法四：flex布局轻松搞定"></a>方法四：flex布局轻松搞定</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>    <span class="hljs-selector-class">.content</span> &#123;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">display</span>: flex;<br>    &#125;<br>    <span class="hljs-selector-class">.left</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: red;<br>    &#125;<br>    <span class="hljs-selector-class">.right</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: pink;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="方法五：使用table和table-cell实现"><a href="#方法五：使用table和table-cell实现" class="headerlink" title="方法五：使用table和table-cell实现"></a>方法五：使用table和table-cell实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>     <span class="hljs-selector-class">.content</span> &#123;<br>         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>         <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>         <span class="hljs-attribute">display</span>: table;<br>     &#125;<br>     <span class="hljs-selector-class">.left</span> &#123;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>         <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>         <span class="hljs-attribute">background</span>: red;<br>         <span class="hljs-attribute">display</span>: table-cell;<br>     &#125;<br>     <span class="hljs-selector-class">.right</span> &#123;<br>         <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>         <span class="hljs-attribute">background</span>: pink;<br>         <span class="hljs-attribute">display</span>: table-cell;<br>     &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="方法六：使用inline-block携手calc函数设置宽度"><a href="#方法六：使用inline-block携手calc函数设置宽度" class="headerlink" title="方法六：使用inline-block携手calc函数设置宽度"></a>方法六：使用inline-block携手calc函数设置宽度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>    <span class="hljs-selector-class">.content</span> &#123;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.left</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: red;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">vertical-align</span>: top;<br>    &#125;<br>    <span class="hljs-selector-class">.right</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>: pink;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">vertical-align</span>: top;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">200px</span>);<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>export、export default以及module.exports、exports之间的区别</title>
    <link href="/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/export%E3%80%81export%20default%E4%BB%A5%E5%8F%8Amodule.exports%E3%80%81exports%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/export%E3%80%81export%20default%E4%BB%A5%E5%8F%8Amodule.exports%E3%80%81exports%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="export、export-default以及module-exports、exports之间的区别"><a href="#export、export-default以及module-exports、exports之间的区别" class="headerlink" title="export、export default以及module.exports、exports之间的区别"></a>export、export default以及module.exports、exports之间的区别</h1><p>export、export default属于ES6模块规范 引入方式import .. from ‘..’;<br>module.exports、exports属于Commonjs规范 引入方式 const xx &#x3D; require(‘..’);<br>ES6模块规范导出的内容 用require的方式引入 也是可以获取到数据的 同理Commonjs写法 用import方式也是可以获取到数据的。</p><h2 id="1-export写法"><a href="#1-export写法" class="headerlink" title="1.export写法"></a>1.export写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// router.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/pdpData&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PdpData&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">PdpData</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/lddData&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;LddData&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">LddData</span> &#125;<br>]<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> filterArr = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr, data</span>) &#123;<br>  ...<br>  你要写的逻辑<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">expression</span> () &#123;<br>  ...<br>  你要写的逻辑<br>&#125;<br><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;lee&#x27;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">24</span>;<br><span class="hljs-keyword">let</span> sex = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> &#123;name, age, sex&#125;<br></code></pre></td></tr></table></figure><p>引入方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;routes, filterArr, expression, name, age, sex&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router.js&#x27;</span> <span class="hljs-comment">// 都引入</span><br><span class="hljs-keyword">import</span> &#123;filterArr&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router.js&#x27;</span> <span class="hljs-comment">// 只引入一个内容filterArr方法</span><br><span class="hljs-comment">// 或</span><br><span class="hljs-keyword">const</span> content = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router.js&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">routes</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">filterArr</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">name</span>); <span class="hljs-comment">// lee</span><br></code></pre></td></tr></table></figure><p>注意：这里在上一个页面 export输出的是什么变量 这个页面 就只能引入什么变量 例如 修改成import {data} from ‘.&#x2F;router.js’是不可以的 router.js中没有data这个变量 所以读不到这个数据<br>如果想实现上面一行注意中的 用data代替routes 修改变量 则参考如下写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;routes <span class="hljs-keyword">as</span> data&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router.js&#x27;</span><br></code></pre></td></tr></table></figure><p>如果想用一个变量值 承接router.js中的所有数据对象 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;myModule&#x27;</span>, myModule.<span class="hljs-property">name</span>, myModule.<span class="hljs-property">age</span>, myModule.<span class="hljs-property">sex</span>, myModule.<span class="hljs-property">expression</span>); <span class="hljs-comment">// 获取router.js中的内容</span><br></code></pre></td></tr></table></figure><h2 id="2-export-default-（默认导出）"><a href="#2-export-default-（默认导出）" class="headerlink" title="2.export default （默认导出）"></a>2.export default （默认导出）</h2><h3 id="（1）默认导出单个方法或者变量"><a href="#（1）默认导出单个方法或者变量" class="headerlink" title="（1）默认导出单个方法或者变量"></a>（1）默认导出单个方法或者变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module &quot;my-module.js&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br></code></pre></td></tr></table></figure><p>引入方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> cube <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./my-module.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">cube</span>(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 27</span><br></code></pre></td></tr></table></figure><h3 id="（2）导出多条变量数据"><a href="#（2）导出多条变量数据" class="headerlink" title="（2）导出多条变量数据"></a>（2）导出多条变量数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dataArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> info = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lee&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>dataArr,<br>info<br>&#125;<br></code></pre></td></tr></table></figure><p>引入方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module-info.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">info</span>); <span class="hljs-comment">// &#123;name: &#x27;lee&#x27;, age: 24&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">dataArr</span>); <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">// 或</span><br><span class="hljs-keyword">const</span> content = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module-info.js&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">default</span>.<span class="hljs-property">info</span>); <span class="hljs-comment">// &#123;name: &#x27;lee&#x27;, age: 24&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content.<span class="hljs-property">default</span>.<span class="hljs-property">dataArr</span>); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><p><strong>export default导出的数据 用import导入 只能使用 import data from ‘.&#x2F;module-info.js’方式 不可以使用import {info, dataArr} from ‘.&#x2F;module-info.js’方式导入数据 这样获取到的是undefined</strong><br><strong>同理</strong><br><strong>export导出的数据 用import导入 只能使用import {info, dataArr} from ‘.&#x2F;module-info.js’方式 不可以使用import data from ‘.&#x2F;module-info.js’方式导入数据 这样获取到的也是undefined</strong></p><h2 id="3-module-exports和exports"><a href="#3-module-exports和exports" class="headerlink" title="3.module.exports和exports"></a>3.module.exports和exports</h2><p>module.exports遵循CommonJS规范，即每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。<br>exports和module.exports之间的关系就相当于 let exports &#x3D; module.exports; exports是module.exports的引用 它们指向堆空间的同一个地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> === <span class="hljs-built_in">exports</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>异同<br>我们优先应使用module.exports去导出一个模块的内容 上面我们看到 exports相当于module.exports的引用 所以exports的使用方法不可以直接赋值 直接赋值就会切断 exports与module.exports之间的联系 如下图所示<br>首先打印module.exports &#x3D;&#x3D;&#x3D; exports返回的是true 证明它们之间恒等 然后我们又给exports重新赋值 不管给它赋值什么类型的数据 都会使module.exports与exports之间不再恒等 所以我们使用exports的时候 只能使用语法来向外暴露内部变量<br><a href="https://imgse.com/i/v5gtBV"><img src="https://s1.ax1x.com/2022/09/01/v5gtBV.png" alt="v5gtBV.png"></a><br>module.exports也是同理 赋值前它与exports恒等 赋值后 不恒等 改变了指针指向的堆地址<br><a href="https://imgse.com/i/v5gdNF"><img src="https://s1.ax1x.com/2022/09/01/v5gdNF.png" alt="v5gdNF.png"></a><br>module.exports使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// testModule.js</span><br><span class="hljs-keyword">const</span> addNum = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 处理逻辑</span><br>&#125;<br><br><span class="hljs-keyword">const</span> arrData = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <br><span class="hljs-keyword">const</span> objInfo = &#123;<span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;test&#x27;</span>&#125;<br> <br><span class="hljs-comment">// 导出方法1</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    addNum,<br>    arrData,<br>    objInfo<br>&#125;<br> <br><span class="hljs-comment">// 导出方法2</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">addNum</span> = addNum;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">arrData</span> = arrData;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">objInfo</span> = objInfo;<br></code></pre></td></tr></table></figure><p>exports使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> addNum = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 处理逻辑</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> arrData = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <br><span class="hljs-keyword">const</span> objInfo = &#123;<span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;test&#x27;</span>&#125;<br> <br><span class="hljs-built_in">exports</span>.<span class="hljs-property">addNum</span> = addNum;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">arrData</span> = arrData;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">objInfo</span> = objInfo;<br></code></pre></td></tr></table></figure><p>module.exports与exports的引入方法相同 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> data <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./testModule.js&#x27;</span><br>或者<br><span class="hljs-keyword">const</span> data = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./testModule.js&#x27;</span>);<br><span class="hljs-comment">// 通过data.addNum() data.arrData data.objInfo 调用</span><br></code></pre></td></tr></table></figure><p>就记录到这里吧 有问题、争议以及不准确的地方可以评论区一起讨论学习</p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建博客并部署到Gitee或者Github</title>
    <link href="/2022/08/31/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitee%E6%88%96%E8%80%85Github/"/>
    <url>/2022/08/31/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitee%E6%88%96%E8%80%85Github/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建博客并部署到Gitee或者Github"><a href="#使用Hexo搭建博客并部署到Gitee或者Github" class="headerlink" title="使用Hexo搭建博客并部署到Gitee或者Github"></a>使用Hexo搭建博客并部署到Gitee或者Github</h1><p>Hexo官方文档地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><strong>安装Git</strong></li></ul><p>Git官网下载[<a href="https://git-scm.com/downloads">下载地址</a>]。</p><ul><li><strong>安装Node.js</strong></li></ul><p>推荐长期支持版[<a href="https://nodejs.org/zh-cn/download/">下载地址</a>]。<br>安装淘宝镜像cnpm加速</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><h4 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h4><p>打开终端，输入命令  cnpm install -g hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs git">C:\Users\QDM&gt;cnpm install -g hexo<br>Downloading hexo to C:\Users\QDM\AppData\Roaming\npm\node_modules\hexo_tmp<br>Copying C:\Users\QDM\AppData\Roaming\npm\node_modules\hexo_tmp\_hexo@6.2.0@hexo to C:\Users\QDM\AppData\Roaming\npm\node_modules\hexo<br>Installing hexo&#x27;s dependencies to C:\Users\QDM\AppData\Roaming\npm\node_modules\hexo/node_modules<br>[1/24] pretty-hrtime@^1.0.3 installed at node_modules\_pretty-hrtime@1.0.3@pretty-hrtime<br>[2/24] archy@^1.0.0 installed at node_modules\_archy@1.0.0@archy<br>[3/24] picocolors@^1.0.0 installed at node_modules\_picocolors@1.0.0@picocolors<br>[4/24] hexo-log@^3.0.0 installed at node_modules\_hexo-log@3.2.0@hexo-log<br>[5/24] abbrev@^1.1.1 installed at node_modules\_abbrev@1.1.1@abbrev<br>[6/24] tildify@^2.0.0 installed at node_modules\_tildify@2.0.0@tildify<br>[7/24] hexo-front-matter@^3.0.0 installed at node_modules\_hexo-front-matter@3.0.0@hexo-front-matter<br>[8/24] text-table@^0.2.0 installed at node_modules\_text-table@0.2.0@text-table<br>[9/24] titlecase@^1.1.3 installed at node_modules\_titlecase@1.1.3@titlecase<br>[10/24] hexo-i18n@^1.0.0 installed at node_modules\_hexo-i18n@1.0.0@hexo-i18n<br>[11/24] strip-ansi@^6.0.0 installed at node_modules\_strip-ansi@6.0.1@strip-ansi<br>[12/24] js-yaml@^4.1.0 installed at node_modules\_js-yaml@4.1.0@js-yaml<br>[13/24] js-yaml-js-types@^1.0.0 installed at node_modules\_js-yaml-js-types@1.0.0@js-yaml-js-types<br>[14/24] bluebird@^3.7.2 installed at node_modules\_bluebird@3.7.2@bluebird<br>[15/24] hexo-fs@^3.1.0 installed at node_modules\_hexo-fs@3.1.0@hexo-fs<br>[16/24] nunjucks@^3.2.3 installed at node_modules\_nunjucks@3.2.3@nunjucks<br>[17/24] micromatch@^4.0.4 installed at node_modules\_micromatch@4.0.5@micromatch<br>[18/24] moize@^6.1.0 installed at node_modules\_moize@6.1.2@moize<br>[19/24] warehouse@^4.0.1 installed at node_modules\_warehouse@4.0.2@warehouse<br>[20/24] resolve@^1.22.0 installed at node_modules\_resolve@1.22.1@resolve<br>[21/24] hexo-cli@^4.3.0 installed at node_modules\_hexo-cli@4.3.0@hexo-cli<br>[22/24] moment@^2.29.1 installed at node_modules\_moment@2.29.4@moment<br>[23/24] moment-timezone@^0.5.34 installed at node_modules\_moment-timezone@0.5.37@moment-timezone<br>[24/24] hexo-util@^2.6.1 installed at node_modules\_hexo-util@2.7.0@hexo-util<br>All packages installed (95 packages installed from npm registry, used 4s(network 4s), speed 1.19MB/s, json 94(499.16KB), tarball 4.63MB, manifests cache hit 0, etag hit 0 / miss 0)<br>[hexo@6.2.0] link C:\Users\QDM\AppData\Roaming\npm\hexo@ -&gt; C:\Users\QDM\AppData\Roaming\npm\node_modules\hexo\bin\hexo<br></code></pre></td></tr></table></figure><h4 id="2-初始化Hexo"><a href="#2-初始化Hexo" class="headerlink" title="2. 初始化Hexo"></a>2. 初始化Hexo</h4><p>在你的电脑上创建Hexo文件夹，在终端中切换到Hexo目录，输入命令 hexo init</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">E:\lsf\study\project\Blog\Hexo&gt;hexo init<br>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>[32mINFO [39m Install dependencies<br>warning hexo-renderer-stylus &gt; stylus &gt; css &gt; source-map-resolve@0.6.0: See https://github.com/lydell/source-map-resolve#deprecated<br>[#############################################################################################################] 463/463 warning Your current version of Yarn is out of date. The latest version is &quot;1.22.19&quot;, while you&#x27;re on &quot;1.22.18&quot;.<br>INFO  Start blogging with Hexo!<br></code></pre></td></tr></table></figure><p>初始化完成后Hexo的目录结构<br><img src="https://s3.bmp.ovh/imgs/2022/09/01/77015b9a0a17dade.png"></p><h4 id="3-更换博客主题"><a href="#3-更换博客主题" class="headerlink" title="3. 更换博客主题"></a>3. 更换博客主题</h4><p>这里以 <a href="https://github.com/fluid-dev/hexo-theme-fluid"><strong>hexo-theme-fluid</strong></a>** **主题为例<br>Hexo Fluid使用手册：<a href="">https://hexo.fluid-dev.com/docs/</a><br>（1）获取主题最新版本<br>方式一：<br>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。<br>方式二：<br>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。<br>（2）指定主题<br>如下修改 Hexo 博客目录中的 _config.yml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">theme: fluid  # 指定主题<br><br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p>想获取更多主题，可在网站： <a href="https://link.juejin.cn/?target=https://hexo.io/themes/">hexo.io&#x2F;themes&#x2F;</a> 选择自己喜欢的主题，按照此步的步骤clone下来。</p><h4 id="4-config-yml对博客进行基础配置"><a href="#4-config-yml对博客进行基础配置" class="headerlink" title="4. _config.yml对博客进行基础配置"></a>4. _config.yml对博客进行基础配置</h4><p>_config.yml文件修改，保存<br><img src="https://s3.bmp.ovh/imgs/2022/09/01/3272afd48a13b75d.png"></p><h4 id="5-本地预览博客"><a href="#5-本地预览博客" class="headerlink" title="5. 本地预览博客"></a>5. 本地预览博客</h4><p>编译项目，输入命令：hexo g<br>运行项目，输入命令：hexo s</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs git">$ hexo g<br>INFO  Validating config<br>INFO  Start processing<br>INFO<br>------------------------------------------------<br>|                                              |<br>|     ________  __            _        __      |<br>|    |_   __  |[  |          (_)      |  ]     |<br>|      | |_ \_| | | __   _   __   .--.| |      |<br>|      |  _|    | |[  | | | [  |/ /&#x27;`\&#x27; |      |<br>|     _| |_     | | | \_/ |, | || \__/  |      |<br>|    |_____|   [___]&#x27;.__.&#x27;_/[___]&#x27;.__.;__]     |<br>|                                              |<br>|       Thank you for using Fluid theme !      |<br>|   Docs: https://hexo.fluid-dev.com/docs/en/  |<br>|                                              |<br>------------------------------------------------<br><br>INFO  Files loaded in 207 ms<br>INFO  Generated: archives/index.html<br>INFO  Generated: archives/2022/index.html<br>INFO  Generated: archives/2022/08/index.html<br>INFO  Generated: local-search.xml<br>INFO  Generated: tags/index.html<br>INFO  Generated: categories/index.html<br>INFO  Generated: index.html<br>INFO  Generated: 404.html<br>INFO  Generated: xml/local-search.xml<br>INFO  Generated: links/index.html<br>INFO  Generated: css/highlight-dark.css<br>INFO  Generated: img/police_beian.png<br>INFO  Generated: js/boot.js<br>INFO  Generated: img/fluid.png<br>INFO  Generated: img/avatar.png<br>INFO  Generated: js/img-lazyload.js<br>INFO  Generated: img/loading.gif<br>INFO  Generated: css/gitalk.css<br>INFO  Generated: css/highlight.css<br>INFO  Generated: js/color-schema.js<br>INFO  Generated: js/events.js<br>INFO  Generated: js/local-search.js<br>INFO  Generated: js/plugins.js<br>INFO  Generated: js/leancloud.js<br>INFO  Generated: js/utils.js<br>INFO  Generated: css/main.css<br>INFO  Generated: 2022/08/30/hello-world/index.html<br>INFO  Generated: img/default.png<br>INFO  28 files generated in 309 ms<br><br>liangshaofeng@GZ007054NB MINGW64 /e/lsf/study/project/Blog/Hexo<br>$ hexo s<br>INFO  Validating config<br>INFO  Start processing<br>INFO<br>------------------------------------------------<br>|                                              |<br>|     ________  __            _        __      |<br>|    |_   __  |[  |          (_)      |  ]     |<br>|      | |_ \_| | | __   _   __   .--.| |      |<br>|      |  _|    | |[  | | | [  |/ /&#x27;`\&#x27; |      |<br>|     _| |_     | | | \_/ |, | || \__/  |      |<br>|    |_____|   [___]&#x27;.__.&#x27;_/[___]&#x27;.__.;__]     |<br>|                                              |<br>|       Thank you for using Fluid theme !      |<br>|   Docs: https://hexo.fluid-dev.com/docs/en/  |<br>|                                              |<br>------------------------------------------------<br><br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br>INFO  Have a nice day<br></code></pre></td></tr></table></figure><p>在浏览器中输入<a href="http://localhost:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%E5%95%A6">http://localhost:4000/就可以看到效果啦</a></p><h3 id="部署博客到Gitee上"><a href="#部署博客到Gitee上" class="headerlink" title="部署博客到Gitee上"></a>部署博客到Gitee上</h3><h4 id="1-创建Gitee账号"><a href="#1-创建Gitee账号" class="headerlink" title="1. 创建Gitee账号"></a>1. 创建Gitee账号</h4><p>到码云：<a href="https://gitee.com/">https://gitee.com/</a> 上申请注册账号，码云类似国内版的GitHub，所以操作界面跟GitHub差不多，多了一些国产化的东西，这里不做更多介绍了，自己研究下。</p><h4 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h4><p><img src="https://s3.bmp.ovh/imgs/2022/09/01/921421c37ee57d0f.png"><br>创建完成后，在项目中复制项目地址。</p><h4 id="3-在-config-yml中配置Git"><a href="#3-在-config-yml中配置Git" class="headerlink" title="3. 在_config.yml中配置Git"></a>3. 在_config.yml中配置Git</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">deploy:<br>  type: git<br>  repo: https://gitee.com/liangshaofeng/hexo-blog.git<br>  branch: master<br></code></pre></td></tr></table></figure><p><strong>注意：冒号后面一定要有空格，否则不能正确识别。</strong></p><h4 id="4-发布到Gitee"><a href="#4-发布到Gitee" class="headerlink" title="4. 发布到Gitee"></a>4. 发布到Gitee</h4><p>输入命令npm install hexo-deployer-git –save 安装自动部署发布工具<br>输入命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 发布博客，首次发布需要在终端中输入账号和密码。</p><h4 id="5-Gitee-Pages设置"><a href="#5-Gitee-Pages设置" class="headerlink" title="5. Gitee Pages设置"></a>5. Gitee Pages设置</h4><p>在项目的服务中选择Pages选项<br><img src="https://cdn.nlark.com/yuque/0/2022/webp/2597840/1661837141797-3d96989c-be9e-4b3a-bcc1-0a51987a7f19.webp#clientId=u028e2338-aaa0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ucb48f74a&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=786&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u75d052f8-d087-4c8e-bd11-1b496bd5403&title="><br>稍等一会儿博客就发布成功啦，访问博客地址：<a href="https://link.juejin.cn/?target=https://xiuxiuing.gitee.io/blog%EF%BC%8C%E5%B0%B1%E5%8F%AF%08%E9%A2%84%E8%A7%88%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81%EF%BC%81%EF%BC%81">xiuxiuing.gitee.io&#x2F;blog</a><br>如果博客的样式不对，则需要在_config.yml中配置下博客地址和路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">url: https://xiuxiuing.gitee.io/blog/<br>root: /blog<br></code></pre></td></tr></table></figure><p>再执行命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就可以啦。</p><h3 id="部署博客到Github上"><a href="#部署博客到Github上" class="headerlink" title="部署博客到Github上"></a>部署博客到Github上</h3><h4 id="1-创建Github账号"><a href="#1-创建Github账号" class="headerlink" title="1.创建Github账号"></a>1.创建Github账号</h4><p>到Github：<a href="https://github.com/">https://github.com/</a> 上申请注册账号</p><h4 id="2-创建仓库-1"><a href="#2-创建仓库-1" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h4><p><img src="https://s3.bmp.ovh/imgs/2022/09/01/2c08b563b89f94d7.png"><br><strong>注意：仓库名字必须是：用户名.github.io</strong></p><h4 id="3-配置SSH-免密登录"><a href="#3-配置SSH-免密登录" class="headerlink" title="3.配置SSH 免密登录"></a>3.配置SSH 免密登录</h4><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用<a href="https://so.csdn.net/so/search?q=ssh&spm=1001.2101.3001.7020">ssh</a> key来解决本地和服务器的连接问题。<br>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限 ~<br>（1）生成秘钥<br>在桌面右键 -&gt; Git Bash Here，设置用户名和邮箱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name &quot;GitHub 用户名&quot;<br>git config --global user.email &quot;GitHub 邮箱&quot;<br></code></pre></td></tr></table></figure><p>（2）创建 SSH 秘钥<br>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs git">$ ssh-keygen -t rsa -C &quot;479632263@qq.com&quot;<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/QDM/.ssh/id_rsa):<br>/c/Users/QDM/.ssh/id_rsa already exists.<br>Overwrite (y/n)? y<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /c/Users/QDM/.ssh/id_rsa<br>Your public key has been saved in /c/Users/QDM/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:NW3Gb5I9NshZBbcPW/1JC+PKBQhVt/jZRiNWvJ4uKWY 479632263@qq.com<br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|       ..... .ooo|<br>|        . .oo o+o|<br>|         .oo=*o=+|<br>|         . ==BO=*|<br>|        S   *=X=+|<br>|          . o+.= |<br>|           o  o  |<br>|           E o . |<br>|          o . .  |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><p>（3）添加秘钥<br>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>Title 随便取个名字，粘贴复制的秘钥内容到 Key 中，点击 Add SSH key 完成添加。<br><img src="https://s3.bmp.ovh/imgs/2022/09/01/2c08b563b89f94d7.png"><br>（4）验证连接<br>打开 Git Bash，输入 ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a> 出现 “Are you sure……”，输入 yes 回车确认</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ ssh -T git@github.com<br>Hi liangshaofeng! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><h4 id="3-在-config-yml中配置Git-1"><a href="#3-在-config-yml中配置Git-1" class="headerlink" title="3. 在_config.yml中配置Git"></a>3. 在_config.yml中配置Git</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">deploy:<br>  type: git<br>  repo: git@github.com:liangshaofeng/liangshaofeng.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p><strong>注意：冒号后面一定要有空格，否则不能正确识别。</strong><br>**     repo输入的地址是ssh的地址 。**</p><h4 id="4-发布到Gitee-1"><a href="#4-发布到Gitee-1" class="headerlink" title="4. 发布到Gitee"></a>4. 发布到Gitee</h4><p>输入命令npm install hexo-deployer-git –save 安装自动部署发布工具<br>输入命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 发布博客，首次发布需要在终端中输入账号和密码。<br>稍等一会儿博客就发布成功啦，访问博客地址：<a href="https://liangshaofeng.github.io/">https://liangshaofeng.github.io/</a></p><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><h4 id="1-现在博客文章"><a href="#1-现在博客文章" class="headerlink" title="1.现在博客文章"></a>1.现在博客文章</h4><p>在&#x2F;Hexo&#x2F;source&#x2F;_posts 目录下编写md文件。</p><h4 id="2-发布博客文章"><a href="#2-发布博客文章" class="headerlink" title="2.发布博客文章"></a>2.发布博客文章</h4><p>输入命令  hexo clean &amp;&amp; hexo g &amp;&amp; hexo d   即可同步到显示</p><p>至此，我们的博客就搭建完成啦！！！</p>]]></content>
    
    
    <categories>
      
      <category>基本技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
